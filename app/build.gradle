apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

apply plugin: 'androidx.navigation.safeargs'
apply plugin: 'dagger.hilt.android.plugin'

android {
    compileSdkVersion 28
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.maryam.sample"
        minSdkVersion 17
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "com.maryam.sample.MockTestRunner"

        // clear state after each individual test
        testInstrumentationRunnerArguments clearPackageData: 'true'

        testOptions.unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    androidExtensions {
        experimental = true
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.1'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'



    def room_version = '2.2.5'
    def retrofit_version = '2.9.0'

    /*Kotlin*/
    implementation "androidx.navigation:navigation-fragment-ktx:2.3.0"
    implementation "androidx.navigation:navigation-ui-ktx:2.3.0"


    /*Kotlin Android Coroutines*/
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.4"

    /*Retrofit*/
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2'

    /*ViewModel*/
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0"
    kapt "androidx.lifecycle:lifecycle-common-java8:2.2.0"

    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.0-alpha06'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.0-alpha06'
    /* room */
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"

    /*Dagger 2*/
    implementation 'com.google.dagger:dagger:2.28'
    kapt 'com.google.dagger:dagger-compiler:2.28'
    //for test
    kaptAndroidTest 'com.google.dagger:dagger-compiler:2.28'

    // orchestrator
    def orchestrator_version = "1.2.0"
    androidTestUtil "androidx.test:orchestrator:$orchestrator_version"

    // Kotlin test
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    // Espresso
    def androidx_espresso_core = "3.2.0"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidx_espresso_core"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$androidx_espresso_core"

    def androidx_espresso_idling_resource = "3.2.0"
    androidTestImplementation "androidx.test.espresso:espresso-idling-resource:$androidx_espresso_idling_resource"
    implementation "androidx.test.espresso:espresso-idling-resource:$androidx_espresso_idling_resource"

    // Mockk.io
    def mockk_version = "1.9.2"
    //def mockk_version = "1.9.3" // had issues with this
    androidTestImplementation "io.mockk:mockk-android:$mockk_version"
    androidTestImplementation "org.mockito:mockito-core:$mockitoVersion"
    androidTestImplementation "com.linkedin.dexmaker:dexmaker-mockito:$dexMakerVersion"

    // androidx.test
    def androidx_test_runner = "1.2.0"
    androidTestImplementation "androidx.test:runner:$androidx_test_runner"
    androidTestImplementation "androidx.test:rules:$androidx_test_runner"

    def androidx_test_core = "1.2.0"
    androidTestImplementation "androidx.test:core-ktx:$androidx_test_core"


    def androidx_test_ext = "1.1.1"
    androidTestImplementation "androidx.test.ext:junit-ktx:$androidx_test_ext"

    // androidx.fragment
    def fragment_version = "1.2.0"
    debugImplementation "androidx.fragment:fragment-testing:$fragment_version"
    implementation "androidx.fragment:fragment-ktx:$fragment_version"

    testImplementation "com.squareup.okhttp3:mockwebserver:$mockwebserver"

    // Dependencies for local unit tests
    testImplementation "org.hamcrest:hamcrest:$hamcrestVersion"
    testImplementation "androidx.arch.core:core-testing:$archTestingVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"

    implementation "com.google.dagger:hilt-android:2.28-alpha"
    kapt "com.google.dagger:hilt-android-compiler:2.28-alpha"


    // For Robolectric tests.
    testImplementation 'com.google.dagger:hilt-android-testing:2.28-alpha'
    // ...with Kotlin.
    kaptTest 'com.google.dagger:hilt-android-compiler:2.28-alpha'


    // For instrumented tests.
    androidTestImplementation 'com.google.dagger:hilt-android-testing:2.28-alpha'
    // ...with Kotlin.
    kaptAndroidTest 'com.google.dagger:hilt-android-compiler:2.28-alpha'


    implementation 'androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha02'
    kapt 'androidx.hilt:hilt-compiler:1.0.0-alpha02'
    kaptAndroidTest 'androidx.hilt:hilt-compiler:1.0.0-alpha02'



}
kapt {
    correctErrorTypes true
}